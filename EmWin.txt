EMWIN_DEMO 
程序：
#include "DIALOG.h"
#include "Button Use.h"
#include "can1.h"
#include "w25qxx.h"
#include "other.h"
#include <math.h>
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
long canruntime=3500;
long canrunspeed=500;
int direction=1;
char runflag=0;
char runmode=0;
char app=0;
#define ID_FRAMEWIN_0 (GUI_ID_USER + 0x00)
#define ID_BUTTON_0 (GUI_ID_USER + 0x01)
#define ID_BUTTON_1 (GUI_ID_USER + 0x02)
#define ID_TEXT_0 (GUI_ID_USER + 0x07)
#define ID_TEXT_1 (GUI_ID_USER + 0x08)
#define ID_TEXT_2 (GUI_ID_USER + 0x09)
#define ID_TEXT_3 (GUI_ID_USER + 0x0A)
#define ID_TEXT_4 (GUI_ID_USER + 0x0B)
#define ID_TEXT_5 (GUI_ID_USER + 0x0C)
#define ID_TEXT_6 (GUI_ID_USER + 0x0D)
#define ID_TEXT_7 (GUI_ID_USER + 0x0E)
#define ID_TEXT_8 (GUI_ID_USER + 0x0F)
//对话框资源表
static const GUI_WIDGET_CREATE_INFO _a Dialog Create[] =
{
{ FRAMEWIN_Create Indirect, "
下肢康复训练系统
", 0, 0, 0,
320,240,FRAMEWIN_CF_DRAGGING,0},
{ BUTTON_Create Indirect, "cancel", GUI_ID_BUTTON1, 180, 140, 111, 55, 0,0},
{ BUTTON_Create Indirect, "OK", GUI_ID_BUTTON0, 20, 140, 111, 55, 0,0},
{ RADIO_Create Indirect, "Radio", GUI_ID_RADIO0, 10, 18, 130, 125, 0, 0x2803, 0 },
{ TEXT_Create Indirect, "Text", ID_TEXT_0, 150, 30, 50, 20, 0, 0x64, 0 },
{ TEXT_Create Indirect, "Text", ID_TEXT_1, 150, 60, 50, 20, 0, 0x64, 0 },
{ TEXT_Create Indirect, "speed", ID_TEXT_2, 220, 30, 80, 20, 0, 0x64, 0 },
{ TEXT_Create Indirect, "Text", ID_TEXT_3, 220, 60, 44, 20, 0, 0x64, 0 },
{ TEXT_Create Indirect, "Text", ID_TEXT_4, 220, 90, 44, 20, 0, 0x64, 0 }, //AD
{ TEXT_Create Indirect, "Text", ID_TEXT_5, 150, 90, 80, 20, 0, 0x64, 0 }, //AD
{ TEXT_Create Indirect, "Text", ID_TEXT_6, 260, 30, 50, 20, 0, 0x64, 0 },
{ TEXT_Create Indirect, "Text", ID_TEXT_7, 280, 60, 30, 20, 0, 0x64, 0 },
{ TEXT_Create Indirect, "Text", ID_TEXT_8, 280, 90, 30, 20, 0, 0x64, 0 },
};
GUI_XBF_DATA XBFData;
GUI_FONT XBFFont;
int _cbget Data(U32 off,U16 Num Bytes,void*p Void,void*p Buffer)
{
W25QXX_Read((u8*)p Buffer,off,Num Bytes);
return 0;
}
//对话框回调函数
static void _cb Dialog(WM_MESSAGE * p Msg)
{
WM_HWIN h Item;
int NCode;
int Id;
int Sel;
switch (p Msg->Msg Id)
{
case WM_INIT_DIALOG:
GUI_XBF_Create Font(&XBFFont,&XBFData,GUI_XBF_TYPE_PROP_AA4_EXT,_cbget Data,0);
GUI_UC_Set Encode UTF8();
//初始化对话框
h Item = p Msg->h Win;
FRAMEWIN_Set Title Height(h Item, 30);
FRAMEWIN_Set Font(h Item, &XBFFont);
FRAMEWIN_Set Text Align(h Item, GUI_TA_HCENTER | GUI_TA_VCENTER);
FRAMEWIN_Set Text Color(h Item, 0x000000FF);
h Item = WM_Get Dialog Item(p Msg->h Win, GUI_ID_BUTTON0);
BUTTON_Set Font(h Item,&XBFFont);
BUTTON_Set Text(h Item,"
开始
");
//
// Initialization of 'Button'
//
h Item = WM_Get Dialog Item(p Msg->h Win, GUI_ID_BUTTON1);
BUTTON_Set Font(h Item,&XBFFont);
BUTTON_Set Text(h Item, "
停止
");
// Initialization of 'Radio0'
h Item = WM_Get Dialog Item(p Msg->h Win, GUI_ID_RADIO0);
RADIO_Set Text(h Item, "
速度模式
", 0);
RADIO_Set Text(h Item, "
角度模式
", 1);
RADIO_Set Text(h Item, "APP 
模式
", 2);
RADIO_Set Font(h Item, &XBFFont);
RADIO_Set Text Color(h Item, 0x00FF0080);
// Initialization of 'Text'
//
h Item = WM_Get Dialog Item(p Msg->h Win, ID_TEXT_0);
TEXT_Set Text(h Item, "
速度
");
TEXT_Set Font(h Item, &XBFFont);
//
// Initialization of 'Text'
//
h Item = WM_Get Dialog Item(p Msg->h Win, ID_TEXT_1);
TEXT_Set Text(h Item, "
角度
");
TEXT_Set Font(h Item, &XBFFont);
h Item = WM_Get Dialog Item(p Msg->h Win, ID_TEXT_5);
TEXT_Set Text(h Item, "
压力
");
TEXT_Set Font(h Item, &XBFFont);
//
h Item = WM_Get Dialog Item(p Msg->h Win, ID_TEXT_6);
TEXT_Set Text(h Item, "mm/s");
TEXT_Set Font(h Item, &XBFFont);
h Item = WM_Get Dialog Item(p Msg->h Win, ID_TEXT_7);
TEXT_Set Text(h Item, "
度
");
TEXT_Set Font(h Item, &XBFFont);
h Item = WM_Get Dialog Item(p Msg->h Win, ID_TEXT_8);
TEXT_Set Text(h Item, "kg ");
TEXT_Set Font(h Item, &XBFFont);
// Initialization of 'Text'
//
h Item = WM_Get Dialog Item(p Msg->h Win, ID_TEXT_2);
TEXT_Set Font(h Item, &XBFFont);
TEXT_Set Text Color(h Item, 0x00FF0000);
//
// Initialization of 'Text'
//
h Item = WM_Get Dialog Item(p Msg->h Win, ID_TEXT_3);
TEXT_Set Font(h Item, &XBFFont);
TEXT_Set Text Color(h Item, 0x00FF0000);
h Item = WM_Get Dialog Item(p Msg->h Win, ID_TEXT_4);
TEXT_Set Font(h Item, &XBFFont);
TEXT_Set Text(h Item, "0");
TEXT_Set Text Color(h Item, 0x00FF0000);
break;
case WM_NOTIFY_PARENT:
Id = WM_Get Id(p Msg->h Win Src);
NCode = p Msg->Data.v;
switch(Id)
{
case GUI_ID_RADIO0: // Notifications sent by 'Radio'
switch(NCode)
{
case WM_NOTIFICATION_CLICKED:
break;
case WM_NOTIFICATION_RELEASED:
break;
case WM_NOTIFICATION_VALUE_CHANGED:
h Item = WM_Get Dialog Item(p Msg->h Win, GUI_ID_RADIO0);
Sel = RADIO_Get Value(h Item);
switch(Sel)
{
case 0: 
//速度模式
canruntime=2000;
runmode=0;
app=0;
canrunspeed=500;
break;
case 1: 
//角度模式
app=0;
runmode=1;
canruntime=100;
break;
case 2: 
//APP 模式
app=1;
runmode =2;
break;
default:
canruntime=0;
break;
}
break;
}
break;
case GUI_ID_BUTTON0: // Notifications sent by 'OK'
switch(NCode)
{
case WM_NOTIFICATION_CLICKED:
break;
case WM_NOTIFICATION_RELEASED:
runflag=1;
// USER END
break;
}
break;
case GUI_ID_BUTTON1: // Notifications sent by 'CANCEL'
switch(NCode)
{
case WM_NOTIFICATION_CLICKED:
// USER START (Optionally insert code for reacting on notification message)
// USER END
break;
case WM_NOTIFICATION_RELEASED:
//CAN_Robo Module_DRV_Velocity_Mode(0,1,0,0);
canruntime=2000;
canrunspeed=500;
runflag=0;
// USER END
break;
}
break;
}
break;
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
default:
h Item = WM_Get Dialog Item(p Msg->h Win, ID_TEXT_2);
TEXT_Set Text(h Item,int2str(real_velocity1));
h Item = WM_Get Dialog Item(p Msg->h Win, ID_TEXT_3);
TEXT_Set Text(h Item,float2str(real_position1));
h Item = WM_Get Dialog Item(p Msg->h Win, ID_TEXT_4);
TEXT_Set Text(h Item,float2str(temp*10/3.30)); 
//压力
//*****************************************************************************
WM_Default Proc(p Msg);
break;
}
}
//创建一个对话框
WM_HWIN Create Framewin(void)
{
WM_HWIN h Win;
h Win = GUI_Create Dialog Box(_a Dialog Create, GUI_COUNTOF(_a Dialog Create), _cb Dialog, 0, 0, 0);
return h Win;
}
//BUTTO 演示函数
void Button Use_Demo(void)
{
WM_HWIN h Win;
WM_Set Create Flags(WM_CF_MEMDEV);
h Win=Create Framewin();
while(1)
{
WM_Send Message No Para(WM_Get Client Window(h Win),2000);
GUI_Delay(100);
}
}
电机驱动程序：
#include "sys.h"
#include "delay.h"
#include "usart.h"
#include "sram.h"
#include "malloc.h"
#include "lcd_config.h"
#include "led.h"
#include "beep.h"
#include "timer.h"
#include "touch.h"
#include "sdio_sdcard.h"
#include "GUI.h"
#include "ff.h"
#include "exfuns.h"
#include "w25qxx.h"
#include "includes.h"
#include "Button Use.h"
#include "WM.h"
#include "DIALOG.h"
#include "other.h"
#include "can1.h"
#include "adc.h"
#include "usart3.h"
#include "usart4_wifi.h"
#include <string.h>
int stime=0,jici=0;
char send3[50]={0};
u16 adc_data,adc;
float temp;
unsigned long systime()
{
if(runflag)
{
stime++;
}
return 0;
}
void can1_task(void *p_arg)
{
OS_ERR err;
delay_ms(100);
CAN_Robo Module_DRV_Reset(0,1); 
//对 0 组 1 号驱动器进行复位
CAN_Robo Module_DRV_Reset(0,2); 
//对 0 组 2 号驱动器进行复位
delay_ms(1000); 
//发送复位指令后的延时必须要有，等待驱动器复
位完毕。
CAN_Robo Module_DRV_Config(0,1,100,0); 
//配置为 1s 传回一次数据
CAN_Robo Module_DRV_Config(0,2,100,0); 
//配置为 1s 传回一次数据
delay_ms(1);
CAN_Robo Module_DRV_Mode_Choice(0,1,Velocity_Mode); 
//选择驱动 1 进入 V 模式
CAN_Robo Module_DRV_Mode_Choice(0,2,Velocity_Mode); 
//选择驱动 2 进入 V 模式
// CAN_Robo Module_DRV_Mode_Choice(0,1,Position_Mode);
delay_ms(500); 
//发送模式选择指令后，要等待驱动器进入模
式就绪。所以延时也不可以去掉。
// CAN_Robo Module_DRV_Velocity_Mode(0,1,0,0);
delay_ms(500);
jici=0;
while(1)
{
adc_data=Get_Adc(ADC_Channel_6);
temp=(float)adc_data*(3.3/4096);
adc_data=temp; 
//整数部分
temp-=adc_data; 
//把已经显示的整数部分去掉，留下小数部
adc=temp*1000; 
//小数部分乘以 1000，相当于保留三位小数。
temp=adc_data+(float)adc/1000; 
//保留三位小数的电压结果
uart4Send Chars(int2str(temp),strlen( int2str(temp) ));
memset(send3,0,50*20*sizeof(char));
strcat (send3,'V'+int2str(real_velocity1));
strcat (send3,'P'+ int2str(real_position1));
uart3Send Chars(send3 , strlen(send3));
if(runflag)
{
if(!GPIO_Read Input Data Bit(GPIOE,GPIO_Pin_6))
{
direction=-direction;
}
if(runmode==0)
{
if(stime>=canruntime)
{
jici++;
if(jici>=0){canrunspeed+=100;jici=0;}
if(canrunspeed>5000)canrunspeed=500;
stime=0;
//runflag=0;
direction=-direction;
CAN_Robo Module_DRV_Velocity_Mode(0,1,5000,0);
CAN_Robo Module_DRV_Velocity_Mode(0,2,5000,0);
}else{
CAN_Robo Module_DRV_Velocity_Mode(0,1,canrunspeed,direction*3000);
CAN_Robo Module_DRV_Velocity_Mode(0,2,canrunspeed,direction*3000);
}
}else if(runmode==1)
{
if(stime>=canruntime)
{
canruntime+=100;
if(canruntime>7000)canruntime=100;
stime=0;
direction=-direction;
CAN_Robo Module_DRV_Velocity_Mode(0,1,5000,0);
CAN_Robo Module_DRV_Velocity_Mode(0,2,5000,0);
}else{
CAN_Robo Module_DRV_Velocity_Mode(0,1,5000,direction*3000);
CAN_Robo Module_DRV_Velocity_Mode(0,2,5000,direction*3000);
}
}else if(runmode==2)
{
if(stime>=canruntime)
{
stime=0;
direction=-direction;
CAN_Robo Module_DRV_Velocity_Mode(0,1,5000,0);
CAN_Robo Module_DRV_Velocity_Mode(0,2,5000,0);
}else{
CAN_Robo Module_DRV_Velocity_Mode(0,1,canrunspeed,direction*3000);
CAN_Robo Module_DRV_Velocity_Mode(0,2,canrunspeed,direction*3000);
}
}
}else{
stime=0;
CAN_Robo Module_DRV_Velocity_Mode(0,1,1000,0);
CAN_Robo Module_DRV_Velocity_Mode(0,2,1000,0);
}
OSTime Dly HMSM(0,0,0,500,OS_OPT_TIME_PERIODIC,&err);
}
}
Main.c 
程序：
#include "sys.h"
#include "delay.h"
#include "usart.h"
#include "sram.h"
#include "malloc.h"
#include "adc.h"
#include "lcd_config.h"
#include "led.h"
#include "timer.h"
#include "touch.h"
#include "sdio_sdcard.h"
#include "GUI.h"
#include "ff.h"
#include "exfuns.h"
#include "w25qxx.h"
#include "includes.h"
#include "Button Use.h"
#include "WM.h"
#include "DIALOG.h"
#include "can1.h"
#include "other.h"
#include "usart3.h"
#include "usart4_wifi.h"
/************************************************
************************************************/
#define SHCSR (*(unsigned int*)(0x E000ED24)) //
系统 
Handler 
控制及状态寄存器
//
任务优先级
#define START_TASK_PRIO 3
//
任务堆栈大小
#define START_STK_SIZE 512
//
任务控制块
OS_TCB Start Task TCB;
//
任务堆栈
CPU_STK START_TASK_STK[START_STK_SIZE];
//
任务函数
void start_task(void *p_arg);
//TOUCH 
任务
//
设置任务优先级
#define TOUCH_TASK_PRIO 4
//
任务堆栈大小
#define TOUCH_STK_SIZE 1024
//
任务控制块
OS_TCB Touch Task TCB;
//
任务堆栈
CPU_STK TOUCH_TASK_STK[TOUCH_STK_SIZE];
//touch 
任务
void touch_task(void *p_arg);
//LED0 
任务
//
设置任务优先级
#define LED0_TASK_PRIO 5
//
任务堆栈大小
#define LED0_STK_SIZE 32
//
任务控制块
OS_TCB Led0Task TCB;
//
任务堆栈
CPU_STK LED0_TASK_STK[LED0_STK_SIZE];
//led0 
任务
void led0_task(void *p_arg);
#define CAN1_STK_SIZE 128
#define CAN1_TASK_PRIO 5
CPU_STK CAN1_TASK_STK[CAN1_STK_SIZE];
OS_TCB Can1Task TCB;
//EMWINDEMO 
任务
//
设置任务优先级
#define EMWINDEMO_TASK_PRIO 6
//
任务堆栈大小
#define EMWINDEMO_STK_SIZE 4096
//
任务控制块
OS_TCB Emwindemo Task TCB;
//
任务堆栈
CPU_STK EMWINDEMO_TASK_STK[EMWINDEMO_STK_SIZE];
//emwindemo_task 
任务
void emwindemo_task(void *p_arg);
int main(void)
{
OS_ERR err;
CPU_SR_ALLOC();
SHCSR|=0x00070000;
delay_init(168); //
延时初始化
NVIC_Priority Group Config(NVIC_Priority Group_2); //
中断分组配置
FSMC_SRAM_Init(); //SRAM 
初始化
mem_init(SRAMIN); //
内部 
RAM 
初始化
mem_init(SRAMEX); //
外部 
RAM 
初始化
uart_init(115200); //
串口 
1 
波特率设置
uart3_init(115200);
LCD_Config_Init(); //
初始化 
LCD
ADC1_Init(); //
初始化 
ADC
W25QXX_Init(); //
初始化 
W25Q128
LED_Init(); //LED 
初始化
WIFI_Server_Init();
CAN1_Configuration();
//exfuns_init(); //
为 
fatfs 
文件系统分配内存
//f_mount(fs[0],"0:",1); //
挂载 
SD 
卡
//f_mount(fs[1],"1:",1); //
挂载 
FLASH
Touch_Init(); //
初始化触摸屏
OSInit(&err); //
初始化 
UCOSIII
OS_CRITICAL_ENTER(); //
进入临界区
//
创建开始任务
OSTask Create((OS_TCB * )&Start Task TCB, //
任务控制块
(CPU_CHAR * )"start task", //
任务名字
(OS_TASK_PTR )start_task, //
任务函数
(void * )0, //
传递给任务函数的参数
(OS_PRIO )START_TASK_PRIO, //
任务优先级
(CPU_STK * )&START_TASK_STK[0], //
任务堆栈基地址
(CPU_STK_SIZE)START_STK_SIZE/10, //
任务堆栈深度限位
(CPU_STK_SIZE)START_STK_SIZE, //
任务堆栈大小
(OS_MSG_QTY )0, //
任务内部消息队列能够接收的最大消息数目
,
为 
0
时禁止接收消息
(OS_TICK )0, //
当使能时间片轮转时的时间片长度，为 
0 
时为默认长度，
(void * )0, //
用户补充的存储区
(OS_OPT )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR, //
任务选项
(OS_ERR * )&err); //
存放该函数错误时的返回值
OS_CRITICAL_EXIT(); //
退出临界区
OSStart(&err); //
开启 
UCOSIII
while(1);
}
//
开始任务函数
void start_task(void *p_arg)
{
OS_ERR err;
CPU_SR_ALLOC();
p_arg = p_arg;
CPU_Init();
#if OS_CFG_STAT_TASK_EN > 0u
OSStat Task CPUUsage Init(&err); //
统计任务
#endif
#ifdef CPU_CFG_INT_DIS_MEAS_EN //
如果使能了测量中断关闭时间
CPU_Int Dis Meas Max Cur Reset();
#endif
#if OS_CFG_SCHED_ROUND_ROBIN_EN //
当使用时间片轮转的时候
//
使能时间片轮转调度功能
,
时间片长度为 
1 
个系统时钟节拍，既 
1*5=5ms
OSSched Round Robin Cfg(DEF_ENABLED,1,&err);
#endif
RCC_AHB1Periph Clock Cmd(RCC_AHB1Periph_CRC,ENABLE);//
开启 
CRC 
时钟
WM_Set Create Flags(WM_CF_MEMDEV); //
启动所有窗口的存储设备
GUI_Init(); //STem Win 
初始化
OS_CRITICAL_ENTER(); //
进入临界区
//STem Win Demo 
任务
OSTask Create((OS_TCB* )&Emwindemo Task TCB,
(CPU_CHAR* )"Emwindemo task",
(OS_TASK_PTR )emwindemo_task,
(void* )0,
(OS_PRIO )EMWINDEMO_TASK_PRIO,
(CPU_STK* )&EMWINDEMO_TASK_STK[0],
(CPU_STK_SIZE)EMWINDEMO_STK_SIZE/10,
(CPU_STK_SIZE)EMWINDEMO_STK_SIZE,
(OS_MSG_QTY )0,
(OS_TICK )0,
(void* )0,
(OS_OPT )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR,
(OS_ERR* )&err);
//
触摸屏任务
OSTask Create((OS_TCB* )&Touch Task TCB,
(CPU_CHAR* )"Touch task",
(OS_TASK_PTR )touch_task,
(void* )0,
(OS_PRIO )TOUCH_TASK_PRIO,
(CPU_STK* )&TOUCH_TASK_STK[0],
(CPU_STK_SIZE)TOUCH_STK_SIZE/10,
(CPU_STK_SIZE)TOUCH_STK_SIZE,
(OS_MSG_QTY )0,
(OS_TICK )0,
(void* )0,
(OS_OPT )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR,
(OS_ERR* )&err);
//LED0 
任务
OSTask Create((OS_TCB* )&Led0Task TCB,
(CPU_CHAR* )"Led0 task",
(OS_TASK_PTR )led0_task,
(void* )0,
(OS_PRIO )LED0_TASK_PRIO,
(CPU_STK* )&LED0_TASK_STK[0],
(CPU_STK_SIZE)LED0_STK_SIZE/10,
(CPU_STK_SIZE)LED0_STK_SIZE,
(OS_MSG_QTY )0,
(OS_TICK )0,
(void* )0,
(OS_OPT )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR,
(OS_ERR* )&err);
OSTask Create((OS_TCB* )&Can1Task TCB,
(CPU_CHAR* )"can1 task",
(OS_TASK_PTR )can1_task,
(void* )0,
(OS_PRIO )CAN1_TASK_PRIO,
(CPU_STK* )&CAN1_TASK_STK[0],
(CPU_STK_SIZE)CAN1_STK_SIZE/10,
(CPU_STK_SIZE)CAN1_STK_SIZE,
(OS_MSG_QTY )0,
(OS_TICK )0,
(void* )0,
(OS_OPT )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR,
(OS_ERR* )&err);
OS_Task Suspend((OS_TCB*)&Start Task TCB,&err); //
挂起开始任务
OS_CRITICAL_EXIT(); //
退出临界区
}
//EMWINDEMO 
任务
void emwindemo_task(void *p_arg)
{
//GUI_CURSOR_Show();
WM_Set Desktop Color(GUI_WHITE);
WM_Set Create Flags(WM_CF_MEMDEV);
//
更换皮肤
BUTTON_Set Default Skin(BUTTON_SKIN_FLEX);
CHECKBOX_Set Default Skin(CHECKBOX_SKIN_FLEX);
DROPDOWN_Set Default Skin(DROPDOWN_SKIN_FLEX);
FRAMEWIN_Set Default Skin(FRAMEWIN_SKIN_FLEX);
HEADER_Set Default Skin(HEADER_SKIN_FLEX);
MENU_Set Default Skin(MENU_SKIN_FLEX);
MULTIPAGE_Set Default Skin(MULTIPAGE_SKIN_FLEX);
PROGBAR_Set Default Skin(PROGBAR_SKIN_FLEX);
RADIO_Set Default Skin(RADIO_SKIN_FLEX);
SCROLLBAR_Set Default Skin(SCROLLBAR_SKIN_FLEX);
SLIDER_Set Default Skin(SLIDER_SKIN_FLEX);
SPINBOX_Set Default Skin(SPINBOX_SKIN_FLEX);
while(1)
{
Button Use_Demo();
}
}
//TOUCH 
任务
void touch_task(void *p_arg)
{
OS_ERR err;
while(1)
{
GUI_TOUCH_Exec();
OSTime Dly HMSM(0,0,0,5,OS_OPT_TIME_PERIODIC,&err);//
延时 
5ms
}
}
//LED0 
任务
void led0_task(void *p_arg)
{
OS_ERR err;
while(1)
{
LED0 = !LED0;
OSTime Dly HMSM(0,0,0,500,OS_OPT_TIME_PERIODIC,&err);//
覔时 
500ms
}
}
